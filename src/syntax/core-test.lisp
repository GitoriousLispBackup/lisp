(in-package :burning-syntax-test)

(defun !symbol= (symbol1 symbol2)
  (cond
    ((eq symbol1 ':gensym) t)
    ((eq symbol2 ':gensym) t)
    (t (!equal symbol1 symbol2))))

(defun !production= (prod1 prod2)
  (!= (length prod1) (length prod2))
  (mapc #'!symbol= prod1 prod2))

(defun !productions= (prods1 prods2)
  (!= (length prods1) (length prods2))
  (mapc #'!production= prods1 prods2))

(defcase core-test)

(deftest core-test rule-to-productions-test ()
  (let ((rule (make-rule 'simple 'simple1 'simple2)))
    (!productions= (burning-syntax::rule-to-productions rule) 
		   '((simple simple1 simple2))))
  (let ((rule (make-rule 'simple '(:|| a b) '(:|| c d))))
    (!productions= (burning-syntax::rule-to-productions rule) 
		   '((simple a c) (simple a d) (simple b c) (simple b d))))
  (let ((rule (make-rule 'simple '(:* a b) '(:* c d))))
    (!productions= (burning-syntax::rule-to-productions rule) 
		   '((simple :gensym :gensym)
		     (:gensym)
		     (:gensym c d :gensym)
		     (:gensym)
		     (:gensym a b :gensym)))))

(deflexeme sample (:and (:char #\H) (:char #\i)))

(deftest core-test productions-terminals ()
  (!equal (burning-syntax::production-terminals '(a b c d e f sample))
	  '(sample))
  (!equal (burning-syntax::production-terminals '(a b c sample d e f sample g h i sample bla-bla-bla))
	  '(sample)))

(deftest core-test production-non-terminals ()
  (!equal (burning-syntax::production-non-terminals '(a sample b sample a sample d sample c))
	  '(b a d c))
  (!error (burning-syntax::production-non-terminals '(sample sample))
	  "Production's result must be non-terminal."))

(deflexeme lexeme1 (:empty))
(deflexeme lexeme2 (:empty))
(deflexeme lexeme3 (:empty))
(deflexeme lexeme4 (:empty))
(deflexeme lexeme5 (:empty))

(deftest core-test grammar-making ()
  (let ((rule1 (make-rule 'rule1 'lexeme1 'lexeme2 'rule1 'lexeme1))
	(rule2 (make-rule 'rule2 '(:* rule1 lexeme1) 'lexeme3 '(:|| lexeme1 lexeme2))))
    (let ((grammar (make-grammar rule1)))
      (!productions= (grammar-productions grammar) '((rule1 lexeme1 lexeme2 rule1 lexeme1)))
      (!equal (grammar-terminals grammar) '(lexeme2 lexeme1))
      (!equal (grammar-non-terminals grammar) '(rule1)))
    (let ((grammar (make-grammar rule1 rule2)))
      (!productions= (grammar-productions grammar)
		     '((rule1 lexeme1 lexeme2 rule1 lexeme1)
		       (rule2 :gensym lexeme3 lexeme1)
		       (rule2 :gensym lexeme3 lexeme2)
		       (:gensym)
		       (:gensym rule1 lexeme1 :gensym)))
      (!equal (grammar-terminals grammar) '(lexeme3 lexeme2 lexeme1))
      (!production= (grammar-non-terminals grammar) '(rule2 rule1 :gensym)))))
    
